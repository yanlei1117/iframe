package com.asiainfo.dbx.ln.component.dao.mybatis;

import com.asiainfo.dbx.ln.component.util.AppBeanUtils;
import com.asiainfo.dbx.ln.component.util.AppTypeConvertUtils;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

/**
 * Created by yanlei on 2014/8/27.
 */
public class MyBatisExample {

    boolean effectModelBack;

    public boolean isEffectModelBack() {
        return effectModelBack;
    }

    public void setEffectModelBack(boolean effectModelBack) {
        this.effectModelBack = effectModelBack;
    }

    protected String countExpression;

    public String getCountExpression() {
        return countExpression;
    }

    public void setCountExpression(String countExpression) {
        this.countExpression = countExpression;
    }

    protected String groupBy;
    /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table person
         *
         * @mbggenerated
         */
        protected String orderByClause;

        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table person
         *
         * @mbggenerated
         */
        protected boolean distinct;

        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table person
         *
         * @mbggenerated
         */
        protected List<Criteria> oredCriteria;

        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table person
         *
         * @mbggenerated
         */
        private Integer offset;

        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table person
         *
         * @mbggenerated
         */
        private Integer limit;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public MyBatisExample() {
            oredCriteria = new ArrayList<Criteria>();
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public void setOrderByClause(String orderByClause) {
            this.orderByClause = orderByClause;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public String getOrderByClause() {
            return orderByClause;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public void setDistinct(boolean distinct) {
            this.distinct = distinct;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public boolean isDistinct() {
            return distinct;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public List<Criteria> getOredCriteria() {
            return oredCriteria;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public void or(Criteria criteria) {
            oredCriteria.add(criteria);
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public Criteria or(Class classz ) {
            Criteria criteria = createCriteriaInternal(classz);
            oredCriteria.add(criteria);
            return criteria;
        }
        public Criteria or() {
            return or((Class)null);
        }
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public Criteria createCriteria(Class classz) {
            Criteria criteria = createCriteriaInternal(classz);
            if (oredCriteria.size() == 0) {
                oredCriteria.add(criteria);
            }
            return criteria;
        }
        public Criteria createCriteria() {
            return createCriteria((Class)null);
        }
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        protected Criteria createCriteriaInternal(Class classz) {
            Criteria criteria = new Criteria(classz);
            return criteria;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public void clear() {
            oredCriteria.clear();
            orderByClause = null;
            distinct = false;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public void setOffset(Integer offset) {
            this.offset=offset;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public Integer getOffset() {
            return offset;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public void setLimit(Integer limit) {
            if(this.offset == null){
                this.offset =0;
            }
            this.limit=limit;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table person
         *
         * @mbggenerated
         */
        public Integer getLimit() {
            return limit;
        }

        /**
         * This class was generated by MyBatis Generator.
         * This class corresponds to the database table person
         *
         * @mbggenerated
         */
        public abstract static class GeneratedCriteria {
            protected List<Criterion> criteria;
            private Class classz = null;
            public GeneratedCriteria(Class classz) {
                super();
                this.classz = classz;
                criteria = new ArrayList<Criterion>();
            }


            public boolean isValid() {
                return criteria.size() > 0;
            }


            public List<Criterion> getAllCriteria() {
                return criteria;
            }

            public List<Criterion> getCriteria() {
                return criteria;
            }

            public void orCriteria(Criteria criteria){
                this.criteria.add (new Criterion(criteria));
            }
            public void addCriterion(String condition) {
                if (condition == null) {
                    throw new RuntimeException("Value for condition cannot be null");
                }
                criteria.add(new Criterion(condition));
            }

            private Object convertValue(Object value,String property){
                if(this.classz != null){
                    value = AppTypeConvertUtils.convertSqlType(value,this.classz,property);
                }
                return value;
            }
            public void addCriterion(String condition, Object value, String property) {
                if (value == null) {
                    throw new RuntimeException("Value for " + property + " cannot be null");
                }

                value = convertValue(value,property);
                criteria.add(new Criterion(condition, value));
            }

            public void addCriterion(String condition, Object value1, Object value2, String property) {
                if (value1 == null || value2 == null) {
                    throw new RuntimeException("Between values for " + property + " cannot be null");
                }
                value1 = convertValue(value1,property);
                value2 = convertValue(value2,property);
                criteria.add(new Criterion(condition, value1, value2));
            }

            public void addCriterionForJDBCDate(String condition, Date value, String property) {
                if (value == null) {
                    throw new RuntimeException("Value for " + property + " cannot be null");
                }
                addCriterion(condition, new java.sql.Date(value.getTime()), property);
            }

            public void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
                if (values == null || values.size() == 0) {
                    throw new RuntimeException("Value list for " + property + " cannot be null or empty");
                }
                List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
                Iterator<Date> iter = values.iterator();
                while (iter.hasNext()) {
                    dateList.add(new java.sql.Date(iter.next().getTime()));
                }
                addCriterion(condition, dateList, property);
            }

            public void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
                if (value1 == null || value2 == null) {
                    throw new RuntimeException("Between values for " + property + " cannot be null");
                }
                addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
            }


        }
        public void  andPrimaryKeyEqualTo(String primaryKey) {

        }
        /**
         * This class was generated by MyBatis Generator.
         * This class corresponds to the database table person
         *
         * @mbggenerated do_not_delete_during_merge
         */
        public static class Criteria extends GeneratedCriteria {

            protected Criteria(Class classz) {
                super(classz);
            }
        }

        /**
         * This class was generated by MyBatis Generator.
         * This class corresponds to the database table person
         *
         * @mbggenerated
         */
        public static class Criterion {
            private String condition;

            private Object value;

            private Object secondValue;

            private boolean noValue;

            private boolean singleValue;

            private boolean betweenValue;

            private boolean listValue;

            private String typeHandler;

            public String getCondition() {
                return condition;
            }

            public Object getValue() {
                return value;
            }

            public Object getSecondValue() {
                return secondValue;
            }

            public boolean isNoValue() {
                return noValue;
            }

            public boolean isSingleValue() {
                return singleValue;
            }

            public boolean isBetweenValue() {
                return betweenValue;
            }

            public boolean isListValue() {
                return listValue;
            }

            public boolean isOrValue(){ return  (this.value instanceof  Criteria);};
            public String getTypeHandler() {
                return typeHandler;
            }

            protected Criterion(String condition) {
                super();
                this.condition = condition;
                this.typeHandler = null;
                this.noValue = true;
            }

            protected  Criterion(Criteria criteria){
                this.value = criteria;

            }
            protected Criterion(String condition, Object value, String typeHandler) {
                super();
                this.condition = condition;
                this.value = value;
                this.typeHandler = typeHandler;
                if (value instanceof List<?>) {
                    this.listValue = true;
                } else {
                    this.singleValue = true;
                }
            }

            protected Criterion(String condition, Object value) {
                this(condition, value, null);
            }

            protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
                super();
                this.condition = condition;
                this.value = value;
                this.secondValue = secondValue;
                this.typeHandler = typeHandler;
                this.betweenValue = true;
            }

            protected Criterion(String condition, Object value, Object secondValue) {
                this(condition, value, secondValue, null);
            }
        }

}
